// <auto-generated />
using System;
using DAL.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230312215227_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DAL.Models.SurveyAnswer", b =>
                {
                    b.Property<Guid?>("SurveyAnswerGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SurveyQuestionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveyAnswerGUID");

                    b.HasIndex("SurveyQuestionGUID");

                    b.ToTable("SurveyAnswers");

                    b.HasData(
                        new
                        {
                            SurveyAnswerGUID = new Guid("13c3768f-b65d-4335-a1d3-1237a9dee323"),
                            SurveyQuestionGUID = new Guid("033e11c4-ecbd-4d93-8945-8412af7d5e84"),
                            Value = "Extremely often"
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("75c8c08c-993f-4f5f-94e3-406fba55f400"),
                            SurveyQuestionGUID = new Guid("033e11c4-ecbd-4d93-8945-8412af7d5e84"),
                            Value = "Very often"
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("940dc8ae-3cf6-4a10-bb58-3b8527d2a0c6"),
                            SurveyQuestionGUID = new Guid("033e11c4-ecbd-4d93-8945-8412af7d5e84"),
                            Value = "Moderately often"
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("baee7704-2583-4053-98c1-c4e887ec6177"),
                            SurveyQuestionGUID = new Guid("033e11c4-ecbd-4d93-8945-8412af7d5e84"),
                            Value = "Slightly often"
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("a7b2a252-96b9-4e53-ad5e-c4ee5748938b"),
                            SurveyQuestionGUID = new Guid("033e11c4-ecbd-4d93-8945-8412af7d5e84"),
                            Value = "Not at all often"
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("3e8db6e0-821e-4706-99b2-da8e7614f776"),
                            SurveyQuestionGUID = new Guid("151f9f15-c839-4706-8130-dee51e277169"),
                            Value = ""
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("ae70f5b6-9cb2-494c-8d5b-a8f9d65d1e70"),
                            SurveyQuestionGUID = new Guid("74fda842-522d-4a01-9cb3-5792825ae6cc"),
                            Value = ""
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("376ac2d0-3560-407f-8228-8494534a2481"),
                            SurveyQuestionGUID = new Guid("484a41a6-2aab-45f3-9b89-39b73bfb9248"),
                            Value = ""
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("cd0953b1-19fb-490c-abd0-f10eb8d29175"),
                            SurveyQuestionGUID = new Guid("6708b211-1ab5-4e3b-82b8-2c514c624f53"),
                            Value = "Horror"
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("d367ed2b-5bde-47f8-8029-3740d3f569ef"),
                            SurveyQuestionGUID = new Guid("6708b211-1ab5-4e3b-82b8-2c514c624f53"),
                            Value = "Romance"
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("ff90c783-f5a5-4d5a-a274-447283c467b7"),
                            SurveyQuestionGUID = new Guid("6708b211-1ab5-4e3b-82b8-2c514c624f53"),
                            Value = "Action/Adventure"
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("92635bf1-779c-4a08-bb90-b503d7f1fc75"),
                            SurveyQuestionGUID = new Guid("6708b211-1ab5-4e3b-82b8-2c514c624f53"),
                            Value = "Thriller"
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("2682f6d5-95b6-4d95-969d-f5927565356a"),
                            SurveyQuestionGUID = new Guid("6708b211-1ab5-4e3b-82b8-2c514c624f53"),
                            Value = "Science-Fiction"
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("b5ad8ed8-b22e-45ab-b0a2-874ff5b1c4f0"),
                            SurveyQuestionGUID = new Guid("6708b211-1ab5-4e3b-82b8-2c514c624f53"),
                            Value = "Comedy"
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("e3fd09a8-16bf-4212-a93f-365c16baa74f"),
                            SurveyQuestionGUID = new Guid("6708b211-1ab5-4e3b-82b8-2c514c624f53"),
                            Value = "Drama"
                        },
                        new
                        {
                            SurveyAnswerGUID = new Guid("1bc97a69-78b2-4b7b-9775-fcbbcb0e1aca"),
                            SurveyQuestionGUID = new Guid("6708b211-1ab5-4e3b-82b8-2c514c624f53"),
                            Value = "Musical"
                        });
                });

            modelBuilder.Entity("DAL.Models.SurveyQuestion", b =>
                {
                    b.Property<Guid>("SurveyQuestionGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveyQuestionGUID");

                    b.ToTable("SurveyQuestions");

                    b.HasData(
                        new
                        {
                            SurveyQuestionGUID = new Guid("033e11c4-ecbd-4d93-8945-8412af7d5e84"),
                            Category = 3,
                            Value = "1.How frequently do you watch movies?"
                        },
                        new
                        {
                            SurveyQuestionGUID = new Guid("151f9f15-c839-4706-8130-dee51e277169"),
                            Category = 0,
                            Value = "2.Out of all the movies you have ever seen, which is your most favourite?"
                        },
                        new
                        {
                            SurveyQuestionGUID = new Guid("74fda842-522d-4a01-9cb3-5792825ae6cc"),
                            Category = 1,
                            Value = "3.Who is your favourite actor?"
                        },
                        new
                        {
                            SurveyQuestionGUID = new Guid("484a41a6-2aab-45f3-9b89-39b73bfb9248"),
                            Category = 2,
                            Value = "4.Who is your favourite director?"
                        },
                        new
                        {
                            SurveyQuestionGUID = new Guid("6708b211-1ab5-4e3b-82b8-2c514c624f53"),
                            Category = 3,
                            Value = "5.What are your top 3 favourite kind of genres?"
                        });
                });

            modelBuilder.Entity("DAL.Models.SurveyUserAnswer", b =>
                {
                    b.Property<Guid>("SurveyUserAnswerGUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SurveyAnswerGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyQuestionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserGUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveyUserAnswerGUID");

                    b.HasIndex("SurveyAnswerGUID");

                    b.HasIndex("SurveyQuestionGUID");

                    b.HasIndex("UserGUID");

                    b.ToTable("SurveyUserAnswers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DAL.Models.SurveyAnswer", b =>
                {
                    b.HasOne("DAL.Models.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("SurveyQuestionGUID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("DAL.Models.SurveyUserAnswer", b =>
                {
                    b.HasOne("DAL.Models.SurveyAnswer", null)
                        .WithMany("SurveyUserAnswers")
                        .HasForeignKey("SurveyAnswerGUID");

                    b.HasOne("DAL.Models.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", "User")
                        .WithMany("SurveyUserAnswers")
                        .HasForeignKey("UserGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.ApplicationUser", b =>
                {
                    b.Navigation("SurveyUserAnswers");
                });

            modelBuilder.Entity("DAL.Models.SurveyAnswer", b =>
                {
                    b.Navigation("SurveyUserAnswers");
                });

            modelBuilder.Entity("DAL.Models.SurveyQuestion", b =>
                {
                    b.Navigation("SurveyAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
